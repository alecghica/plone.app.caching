Plone caching to-do
===================

plone.caching
-------------

 [ ] Stop control flow exception from being logged in error_log
        - plone.app.caching may add this to the list of ignored exceptions on
          install

 [ ] Determine if we need a way to split the rule set/operation mapping
     according to arbitrary predicates, e.g. between anonymous and authenticated.
        - determine if we really need this first
        - can be solved in the same way as the chain operation, with a custom
            intermediary operation
        - possible predicates:
            - anonymous vs. authenticated
            - is item viewable by anonymous?
            - is debug mode enabled?
            - request values (e.g. status message, SearchableText)

plone.app.caching
-----------------
 
 [ ] Write IOperationLookup adapter for skin layer resources
        - look up by resource name and/or portal_type of parent
        - use custom mapping in plone.registry
 
 [ ] Manage profiles of cache settings via GenericSetup, but hide from
     portal_quickinstaller.
        - can register an INonInstallable utility which enumerates the
          relevant profiles/products
        - alternatively we can fix the quickinstaller to not list profiles
          not for IPloneSiteRoot
        - register profiles for marker interface
 
 [ ] Build control panel
        - enable/disable caching
        - apply profile (search profiles for marker interface)
        - modify mappings
        - modify operation settings (global and per-ruleset)
 
 [ ] Build default operations and rules

 [ ] Implement ILastModified for Plone content

plone.app.cachepurging
----------------------

 [ ] Investigate purging strategies

