Plone caching to-do
===================

plone.app.caching
-----------------

 [ ] Tests for utils
 
 [ ] Tests for ETag components
 
 [ ] Tests for basic operations
 
 [ ] Integration tests
 
 [ ] Update KGS
 
 [ ] Add caching declarations to plone.namedfile
        - Download view should declare ruleset plone.download
        - IPurgeURL adapter should include full path to view plus sub-paths
 
Cache lookup investigations
===========================

The following things have been spotted as published objects, which we may want
to cache:

Page templates
--------------

**Types:**

* ``Products.CMFCore.FSPageTemplate.FSPageTemplate``
    => inherits: ``Products.PageTemplates.PageTemplate.PageTemplate``
* ``Products.PageTemplates.ZopePageTemplate.ZopePageTemplate``
    => inherits: ``Products.PageTemplates.PageTemplate.PageTemplate``

* ``Products.CMFFormController.FSControllerPageTemplate.FSControllerPageTemplate``
    => inherits: ``Products.CMFCore.FSPageTemplate.FSPageTemplate``
* ``Products.CMFFormController.ControllerPageTemplate.ControllerPageTemplate``
    => inherits: ``Products.PageTemplates.ZopePageTemplate.ZopePageTemplate``

**Strategy:**
    
* Register lookup for ``Products.PageTemplates.PageTemplate.PageTemplate``
* Lookup rule by name (``__name__``)
* Fall back to lookup rule by context type (``__parent__.portal_type``) if the
  view name is a default view for the corresponding content type

Zope 2 style resources
----------------------

**Types:**

* ``Products.CMFCore.FSFile.FSFile`` (via ``index_html``)
    => through skin layer
* ``Products.CMFCore.FSImage.FSImage`` (via ``index_html``)
    => through skin layer
* ``OFS.Image.File`` (via ``index_html``)
    => can be customised resource
    => or ResourceRegistries wrapper

* ``OFS.Image.Image`` (via ``index_html``)
    => inherits: ``OFS.Image.File``
    => can be customised resource

**Strategy:**

* Register cache rule for 
    => ``Products.CMFCore.FSFile.FSFile``,
    => ``Products.CMFCore.FSImage.FSImage``
    => ``OFS.Image.File``

Zope 3 style resources
----------------------

**Types:**

* ``Products.Five.metaclass.ConcatResourceN``
* ``Products.Five.metaclass.DirContainedFileResourceN``
* ``Products.Five.metaclass.FileResourceN``
    => all generated

**Real classes:**

* ``zope.app.publisher.browser.fileresource.FileResource``
    => sets own cache headers
* ``zope.app.publisher.browser.resource.Resource``
    => base class for standard Zope resources, but not KSS concat resources
* ``Products.Five.browser.resource.Resource``
    => base class for resources generated by Five

**Strategy:**

* Register cache rule for ``Products.Five.browser.resource.Resource``
    => (same as for Zope 2 style resource)
* Possibly implement differently through alternative caching operation adapter
  using the same name

Other
-----

For now, we will ignore these:

* DTML methods (skin layers and TTW)
* ``App.ImageFile.ImageFile`` (used in the ZMI)
* STX and reST files (from CMF)
* Python scripts (skin layers and TTW)
* Form controller scripts and validators (skin layers and TTW)
