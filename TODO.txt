Plone caching to-do
===================

plone.caching
-------------

 [ ] Determine if we need a way to split the rule set/operation mapping
     according to arbitrary predicates, e.g. between anonymous and
     authenticated.
     
        - determine if we really need this first
        - can be solved in the same way as the chain operation, with a custom
          intermediary operation
        - possible predicates:
            - anonymous vs. authenticated
            - is item viewable by anonymous?
            - is debug mode enabled?
            - request values (e.g. status message, SearchableText)

plone.app.caching
-----------------
 
 [ ] Build UI for cache operation settings
        - view operations
        - view/edit default settings
        - view/edit per-ruleset settings
        - use z3c.form
 
 [ ] Update README
 
 [ ] Build default response mutators
        - CacheFu has the following:
            - no-cache
            - cache-with-etag
            - cache-with-last-modified
            - cache-in-proxy (configurable length)
            - cache-in-browser (configurable length)
            - cache-in-memory (like an interceptor)
        - We probably want more semantic types:
            - no-cache
            - content-item
                - assume some personalisation
            - content-folder
                - assume dynamic rendering
            - content-feed
                - e.g. RSS feed template
            - static-resources
                - e.g. OFS File/Image, FS File/FSImage, Z3-style resources
                - can implement differently for each type with overloaded
                  adapter
                - may need a special check for the isCacheable() flag in
                  ResourceRegistries and/or the ZCacheable flags in OFS.Cache.
        - We want a library of helper functions to perform standard checks
          and header operations, in ``plone.app.caching.operations.utils``. 
 
 [ ] Build default cache interceptors
        - check-not-modified
                - check for If-None-Match and/or If-Modified-Since
                - set 304 response and return empty
                - use ILastModified adapter
        - ram-cached
                - check if stale
                - look up in cache manager and return

 [ ] Declare default rule types
        - zope-resource
            - includes OFS resources, CMF FS resources and items in
              ResourceRegistries (which use OFS Files when merged, or the
              original file when not merged/in debug mode)
            - Note: File objects created by RR have no last-modified date,
              because they are generated on the fly and not persisted
        - content-folder-view
            - A user-facing view of a folderish content item
        - content-item-view
            - A user-facing view of a non-folderish content item
        - content-feed
            - e.g. an RSS feed
        - ...

 [ ] Functional tests

plone.app.cachepurging
----------------------

 [ ] Investigate purging strategies

Cache lookup investigations
===========================

The following things have been spotted as published objects, which we may want
to cache:

Page templates
--------------

**Types:**

* ``Products.CMFCore.FSPageTemplate.FSPageTemplate``
    => inherits: ``Products.PageTemplates.PageTemplate.PageTemplate``
* ``Products.PageTemplates.ZopePageTemplate.ZopePageTemplate``
    => inherits: ``Products.PageTemplates.PageTemplate.PageTemplate``

* ``Products.CMFFormController.FSControllerPageTemplate.FSControllerPageTemplate``
    => inherits: ``Products.CMFCore.FSPageTemplate.FSPageTemplate``
* ``Products.CMFFormController.ControllerPageTemplate.ControllerPageTemplate``
    => inherits: ``Products.PageTemplates.ZopePageTemplate.ZopePageTemplate``

**Strategy:**
    
* Register lookup for ``Products.PageTemplates.PageTemplate.PageTemplate``
* Lookup rule by name (``__name__``)
* Fall back to lookup rule by context type (``__parent__.portal_type``) if the
  view name is a default view for the corresponding content type

Zope 2 style resources
----------------------

**Types:**

* ``Products.CMFCore.FSFile.FSFile`` (via ``index_html``)
    => through skin layer
* ``Products.CMFCore.FSImage.FSImage`` (via ``index_html``)
    => through skin layer
* ``OFS.Image.File`` (via ``index_html``)
    => can be customised resource
    => or ResourceRegistries wrapper

* ``OFS.Image.Image`` (via ``index_html``)
    => inherits: ``OFS.Image.File``
    => can be customised resource

**Strategy:**

* Register cache rule for 
    => ``Products.CMFCore.FSFile.FSFile``,
    => ``Products.CMFCore.FSImage.FSImage``
    => ``OFS.Image.File``
    => name: ``zope-resource``

Zope 3 style resources
----------------------

**Types:**

* ``Products.Five.metaclass.ConcatResourceN``
* ``Products.Five.metaclass.DirContainedFileResourceN``
* ``Products.Five.metaclass.FileResourceN``
    => all generated

**Real classes:**

* ``zope.app.publisher.browser.fileresource.FileResource``
    => sets own cache headers
* ``zope.app.publisher.browser.resource.Resource``
    => base class for standard Zope resources, but not KSS concat resources
* ``Products.Five.browser.resource.Resource``
    => base class for resources generated by Five

**Strategy:**

* Register cache rule for ``Products.Five.browser.resource.Resource``
    => name: ``zope-resource`` (same as for Zope 2 style resource)
* Possibly implement differently through alternative IResponseMutator adapter
  using the same name

Other
-----

For now, we will ignore these:

* DTML methods (skin layers and TTW)
* ``App.ImageFile.ImageFile`` (used in the ZMI)
* STX and reST files (from CMF)
* Python scripts (skin layers and TTW)
* Form controller scripts and validators (skin layers and TTW)
